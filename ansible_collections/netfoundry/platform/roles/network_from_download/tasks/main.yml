---
# tasks file for network_from_download

- name: import vars from network download file
  include_vars:
    file: "{{ downloaded_network_file }}"
    name: downloaded_network
  tags: vars

  # The info module is read-only and may establish a session or take an
  #  inventory of a network or both. In this case we're authenticating as a
  #  member of the caller's organization and verifying access to a particular
  #  network group, if specified in the downloaded_network file
- name: Establish Session
  netfoundry_info:
    network_group: "{{ downloaded_network.networkGroupId | default(omit) }}"
    credentials: "{{ netfoundry_credentials | default(omit) }}"
    proxy: "{{ netfoundry_proxy | default(omit) }}"
  register: netfoundry_api
  tags: session

  # The network module will create the network if necessary and wait for desired state.
- name: Create Network
  netfoundry_network:
    name: "{{ downloaded_network.name }}"
    size: "{{ downloaded_network.size }}"
    datacenter: "{{ downloaded_network.locationCode }}"
    version: "{{ downloaded_network.productVersion }}"
    state: PROVISIONED
    network_group: "{{ netfoundry_api.network_group }}"
    #wait: "{{ network_wait }}"
  register: created_network

  # Now we'll use the same info module again with the session/bearer token we
  # already obtained to take an inventory of a particular network.
- name: Describe the Network
  netfoundry_info:
    network: "{{ downloaded_network.name }}"
    inventory: True
    session: "{{ netfoundry_api.session }}"
    proxy: "{{ netfoundry_proxy | default(omit) }}"
  register: netfoundry_api
  tags: inventory

  # BEGIN configure routers in parallel to save time
- name: wait in the background for each hosted edge router to become REGISTERED
  netfoundry_router:
    name: "{{ item.name }}"
    datacenter: "{{ item.datacenter | default(omit)  }}"
    provider: "{{ item.provider | default(omit)  }}"
    attributes: "{{ item.attributes | default(omit)  }}"
    state: REGISTERED
    wait: "{{ router_wait }}"
    tunnelerEnabled: "{{ item.tunnelerEnabled | default(omit)  }}"
    linkListener: "{{ item.linkListener | default(omit) }}"
    network: "{{ netfoundry_api.network }}"
  register: router_watcher
  async: "{{ router_wait }}"
  poll: 0
  loop: "{{ downloaded_network.edgeRouters }}"
  tags:
  - routers

- name: Wait for router watcher
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  retries: "{{ router_wait }}"
  delay: 1
  register: async_poll_results
  until: async_poll_results.finished
  loop: "{{ router_watcher.results }}"
  loop_control:
    loop_var: "async_result_item"
  when: async_result_item.ansible_job_id is defined
  tags:
  - routers
  # END configure routers in parallel to save time

- name: configure OTT endpoints
  netfoundry_endpoint:
    name: "{{ item.name }}"
    attributes: "{{ item.attributes }}"
    network: "{{ netfoundry_api.network }}"
  when: item.enrollmentMethod.ott
  register: ott_endpoints
  async: "{{ endpoint_wait }}"
  loop: "{{ downloaded_network.endpoints }}"
  tags: endpoints

- name: configure simple endpoint-hosted services
  netfoundry_service_simple:
    name: "{{ item.name }}"
    attributes: "{{ item.attributes }}"
    clientHostName: "{{ item.model.clientIngress.host }}"
    clientPort: "{{ item.model.clientIngress.port | int }}"
    endpoints: "{{ item.model.bindEndpointAttributes | default([]) }}"
    serverHostName: "{{ item.model.serverEgress.host | default(omit) }}"          # default is SDK-hosted
    serverPort: "{{ (item.model.serverEgress.port | int) | default(omit) }}"      # default is client port unless SDK-hosted
    serverProtocol: "{{ item.model.serverEgress.protocol | default(omit) }}"      # default TCP
    encryptionRequired: "{{ item.model.encryptionRequired | default(omit) }}"     # default True
    edgeRouterAttributes: "{{ item.model.edgeRouterAttributes | default(omit) }}" # default #all
    #wait: "{{ service_wait }}"
    network: "{{ netfoundry_api.network }}"
  when:
  - item.modelType == "TunnelerToEndpoint"
  register: simple_endpoint_services
  async: "{{ service_wait }}"
  loop: "{{ downloaded_network.services }}"
  tags: services

- name: configure simple router-hosted services
  netfoundry_service_simple:
    name: "{{ item.name }}"
    attributes: "{{ item.attributes }}"
    clientHostName: "{{ item.model.clientIngress.host }}"
    clientPort: "{{ item.model.clientIngress.port | int }}"
    egressRouter: "{{ item.model.edgeRouterHosts.0.edgeRouterName }}"
    serverHostName: "{{ item.model.edgeRouterHosts.0.serverEgress.host }}"
    serverPort: "{{ (item.model.edgeRouterHosts.0.serverEgress.port | int) | default(omit) }}"      # default is client port
    serverProtocol: "{{ item.model.edgeRouterHosts.0.serverEgress.protocol | default(omit) }}"      # default TCP
    encryptionRequired: "{{ item.model.encryptionRequired | default(omit) }}"     # default True
    edgeRouterAttributes: "{{ item.model.edgeRouterAttributes | default(omit) }}" # default #all
    #wait: "{{ service_wait }}"
    network: "{{ netfoundry_api.network }}"
  when:
  - item.modelType == "TunnelerToEdgeRouter"
  register: simple_router_services
  async: "{{ service_wait }}"
  loop: "{{ downloaded_network.services }}"
  tags: services

- name: configure advanced services as raw object # advanced are always endpoint-hosted
  netfoundry_service_raw:
    object: "{{ item }}"
    #wait: "{{ service_wait }}"
    wait: 0 # work around missing async process
    network: "{{ netfoundry_api.network }}"
  when:
  - item.modelType == "AdvancedTunnelerToEndpoint"
  register: advanced_services
  loop: "{{ downloaded_network.services }}"
  tags: 
    - services
    - services_advanced
    - services_raw

- name: configure edge router policies
  netfoundry_router_policy:
    name: "{{ item.name }}"
    endpoints: "{{ item.endpointAttributes | default(omit)  }}"
    routers: "{{ item.edgeRouterAttributes | default(omit)  }}"
    network: "{{ netfoundry_api.network }}"
  register: router_policies
  async: "{{ policy_wait }}"
  loop: "{{ downloaded_network.edgeRouterPolicies }}"
  when: not item.name.endswith('-system')
  tags: router_policies

- name: configure app-wans
  netfoundry_appwan:
    name: "{{ item.name }}"
    endpoints: "{{ item.endpointAttributes | default(omit)  }}"
    services: "{{ item.serviceAttributes | default(omit)  }}"
    network: "{{ netfoundry_api.network }}"
  register: router_policies
  async: "{{ policy_wait }}"
  loop: "{{ downloaded_network.appWans }}"
  when: not item.name.endswith('-system')
  tags: app_wans
  
